version: "2.1"
orbs:
  node: circleci/node@5.0.2
  win: circleci/windows@5.0
  codecov: codecov/codecov@3.0.0
jobs:
  user-service:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/UserService
            yarn 
            yarn test
          name: Running Test
  restaurant-service:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/RestaurantService
            yarn 
            yarn test
          name: Running Test
  authentication-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/AuthenticationService
            dotnet format
          name: Linting Solution
      - run:
          command: |
            cd CPHMTOGO/AuthenticationService
            dotnet build
          name: Building Solution
      - run:
          command: |
            cd CPHMTOGO/TestZone/AuthenticationServiceTests
            dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage.opencover.xml
          name: Testing Solution
      - run:
          command: |
            # Code to get coverage percentage 
            $coverage = (Get-Content coverage.opencover.xml | Select-String -Pattern "LineCoverage").Matches.Value
            $coverage = [double]$coverage.TrimEnd("%")
            Write-Host "Coverage percentage: $coverage"
          name: Displaying coverage percentage
      - run:
          command: |
            if ($coverage -lt 60) {
                Write-Error "Coverage is less than 60%, failing pipeline"
                exit 1
            }
          name: Asserting coverage
      - run:
          command: |
            echo "Uploading Coverage"
            curl -s https://codecov.io/bash > codecov.sh
            chmod +x codecov.sh
            ./codecov.sh -f "coverage.opencover.xml" -t $CODECOV_TOKEN
          name: Uploading Coverage
  order-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/OrderService
            dotnet build
          name: Building Solution
      - run:
          command: |
            cd CPHMTOGO/TestZone/OrderServiceTests
            dotnet test
          name: Testing Solution
  payment-logging-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/PaymentLoggingService
            dotnet build
          name: Building Solution
      - run:
          command: |
            cd CPHMTOGO/TestZone/PaymentLoggingServiceTests
            dotnet test
          name: Testing Solution
  payment-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/PaymentService
            dotnet build
          name: Building Solution
      - run:
          command: |
            cd CPHMTOGO/TestZone/PaymentServiceTests
            dotnet test
          name: Testing Solution
  address-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/AddressService
            dotnet build
          name: Building Solution
workflows:
  CPHMTOGO_PIPELINE:
    jobs:
      - user-service
      - authentication-service
      - order-service
      - restaurant-service
      - payment-service
      - payment-logging-service
      - address-service