version: "2.1"
orbs:
  node: circleci/node@5.0.2
  win: circleci/windows@5.0
jobs:
  user-service:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/UserService
            yarn 
            yarn test
          name: Running Test
  restaurant-service:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/RestaurantService
            yarn 
            yarn test
          name: Running Test
  authentication-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/AuthenticationService
            dotnet format
          name: Linting
      - run:
          command: |
            cd CPHMTOGO/AuthenticationService
            dotnet build
          name: Building Solution
      - run:
          command: |
            cd CPHMTOGO/AuthenticationService
            dotnet test --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./coverage/
          name: Testing Solution
      - store_test_results:
          path: TestResults/TestResults.xml
      - store_artifacts:
          path: coverage/
      - run:
         command: |
          echo "Current working directory: $(pwd)"
          echo "Checking coverage directory: `ls -al coverage/`"
          if test -f "coverage/coverage.cobertura.xml"; then
            echo "Coverage file found: coverage/coverage.cobertura.xml"
            $coverage = (Get-Content -Raw -Path coverage/coverage.cobertura.xml) -replace '.*tests="1" covered="([^"]+)".*', '$1'
            $threshold = 60
            if ($coverage -lt $threshold) {
              Write-Host "Coverage is below threshold: $coverage%"
              exit 1
            } 
            else {
              Write-Host "Coverage is above threshold: $coverage%"
            }
          else
            echo "Coverage file not found"
            exit 1
          fi
         name: Check coverage
  order-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/OrderService
            dotnet build
          name: Building Solution
      - run:
          command: |
            cd CPHMTOGO/TestZone/OrderServiceTests
            dotnet test
          name: Testing Solution
  payment-logging-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/PaymentLoggingService
            dotnet build
          name: Building Solution
      - run:
          command: |
            cd CPHMTOGO/TestZone/PaymentLoggingServiceTests
            dotnet test
          name: Testing Solution
  payment-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/PaymentService
            dotnet build
          name: Building Solution
      - run:
          command: |
            cd CPHMTOGO/TestZone/PaymentServiceTests
            dotnet test
          name: Testing Solution
  address-service:
    executor:
      name: win/default
    steps:
      - checkout
      - run:
          command: |
            cd CPHMTOGO/AddressService
            dotnet build
          name: Building Solution
workflows:
  CPHMTOGO_PIPELINE:
    jobs:
      - user-service
      - authentication-service
      - order-service
      - restaurant-service
      - payment-service
      - payment-logging-service
      - address-service